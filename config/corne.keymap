/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
 retro-tap;
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp K_COPY   &kp LCTRL &kp D &kp U &kp P &kp SQT   &kp K &kp G  &kp R     &kp L   &kp RCTRL    &kp BSPC
   &kp K_PASTE &kp I &kp O &kp E &kp A &kp Y   &kp F &kp H  &kp T     &kp N   &kp S &kp SQT
   &kp K_CUT &kp RALT &kp Q &kp J &kp C &kp X   &kp B &kp M  &kp W &kp V &kp Z &kp RSHFT
                  &lt 3 ENTER &kp SPACE &lt 1 ESC   &kp LSHFT &lt 2 BSPC &kp LGUI
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &bt BT_SEL 0    &trans    &kp TILDE   &kp DOLLAR  &kp CARET  &trans    &kp PRCNT   &kp PRCNT   &kp COLON &kp AT &trans &trans
   &bt BT_NXT &kp AMPS &kp LBKT &kp LBRC &kp RBRC &kp LPAR      &kp EQUAL &kp STAR &kp RPAR &kp PLUS &kp RBKT &trans
   &bt BT_CLR  &trans       &trans       &trans       &kp HASH       &trans            &trans   &kp MINUS   &trans &trans    &trans &trans
                                        &trans     &trans       &trans         &kp TAB &trans &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  {  |  }  | "|" |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  [  |  ]  |  \  |  ~   | // TODO: Fix this row when &mkp is committed
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans  &kp SEMICOLON  &kp COMMA  &kp DOT  &trans  &trans   &trans &kp BSLH  &kp EXCL &kp QMARK &trans &trans
   &trans &kp N1    &kp N2  &kp N3    &kp N4    &kp N5      &kp N6 &kp N7 &kp N8  &kp N9 &kp N0 &trans
   &trans &trans    &trans  &trans    &kp SLASH    &trans      &trans    &kp UNDER    &trans          &trans   &trans &trans
                                   &trans &trans &trans   &trans &trans &trans
                        >;
                };
                func_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  {  |  }  | "|" |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  [  |  ]  |  \  |  ~   | // TODO: Fix this row when &mkp is committed
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp K_UNDO  &trans  &trans  &trans  &trans  &trans   &kp C_VOLUME_UP &trans  &kp RA(1) &kp RA(LS(SLASH)) &trans &trans
   &kp K_AGAIN  &kp RA(A)    &kp RA(S)  &kp RA(O)    &trans    &kp C_VOLUME_DOWN      &trans &kp LEFT &kp DOWN        &kp UP &kp RIGHT &trans
   &trans &trans    &trans  &trans    &kp C_EJECT    &trans      &kp C_PP    &kp RA(N)    &trans          &trans   &trans &trans
                                   &trans &trans &trans   &trans &trans &trans
                        >;
                };
        };
};
